import pigpio
import time

GPIO_PIN = 27  # ุงูุจู ุงููุชุตู ุจุฎุท DATA ูู ุงููุณุชูุจู

# ุฅูุดุงุก ูุงุฆู pigpio
pi = pigpio.pi()
if not pi.connected:
    exit("โ ูู ูุชู ุงูุงุชุตุงู ุจู pigpio daemon. ุชุฃูุฏ ูู ุชุดุบูู sudo pigpiod.")

print(f"๐ก ุงูุงุณุชูุงุน ุนูู GPIO {GPIO_PIN}...")

# ุฅุนุฏุงุฏ ุงููุชุบูุฑุงุช
last_tick = None
timings = []

# ุฏุงูุฉ ุงููุนุงูุฌุฉ ุนูุฏ ุญุฏูุซ ูุจุถุฉ
def rf_callback(gpio, level, tick):
    global last_tick, timings

    if level == pigpio.TIMEOUT:
        if len(timings) > 5:  # ุชุฃูุฏ ุฃูู ููู ุฅุดุงุฑุฉ ุญููููุฉ
            print("\nโ ุชู ุงูุชูุงุท ุฅุดุงุฑุฉ:")
            print("๐ ุงููุชุฑุงุช ุงูุฒูููุฉ (us):")
            print(timings)
        timings = []
        return

    if last_tick is not None:
        delta = pigpio.tickDiff(last_tick, tick)
        timings.append(delta)
    last_tick = tick

# ุฅุนุฏุงุฏ ุงูู GPIO
pi.set_mode(GPIO_PIN, pigpio.INPUT)
pi.set_pull_up_down(GPIO_PIN, pigpio.PUD_DOWN)
pi.set_watchdog(GPIO_PIN, 10)  # 10ms = 10000ยตsุ ูุฅููุงุก ุงูุฅุดุงุฑุฉ

# ุชุนููู ุงููููุจุงู
cb = pi.callback(GPIO_PIN, pigpio.EITHER_EDGE, rf_callback)

try:
    while True:
        time.sleep(1)

except KeyboardInterrupt:
    print("\n๐ด ุชู ุฅููุงู ุงูุจุฑูุงูุฌ.")

finally:
    cb.cancel()
    pi.stop()
